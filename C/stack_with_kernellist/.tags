!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSENT	macro.h	19;"	d
FAIL	macro.h	9;"	d
FALSE	macro.h	13;"	d
HLIST_HEAD	list.h	475;"	d
HLIST_HEAD_INIT	list.h	474;"	d
INIT_HLIST_HEAD	list.h	476;"	d
INIT_HLIST_NODE	list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LIST_HEAD	list.h	27;"	d
LIST_HEAD_INIT	list.h	25;"	d
LIST_POISON1	list.h	17;"	d
LIST_POISON2	list.h	18;"	d
NO	macro.h	16;"	d
OK	macro.h	10;"	d
PRESENT	macro.h	18;"	d
RETRY	macro.h	21;"	d
SIZEOF	macro.h	23;"	d
STACK_HEAD	stack.h	5;"	d
TRUE	macro.h	12;"	d
YES	macro.h	15;"	d
_LINUX_LIST_H	list.h	2;"	d
__MACRO_H_	macro.h	2;"	d
__define_initcall	macro.h	32;"	d
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_for_each	list.h	294;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
at	list.h	/^	struct list_head *at = head->next;$/;"	l
bool	macro.h	/^typedef uint8_t bool;$/;"	t
container_of	macro.h	25;"	d
core_initcall	macro.h	37;"	d
first	list.h	/^	struct hlist_node *first = h->first;$/;"	l
first	list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
first	list.h	/^	struct list_head *first = list->next;$/;"	l
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	list.h	548;"	d
hlist_for_each	list.h	550;"	d
hlist_for_each_entry	list.h	565;"	d
hlist_for_each_entry_continue	list.h	577;"	d
hlist_for_each_entry_from	list.h	589;"	d
hlist_for_each_entry_safe	list.h	602;"	d
hlist_for_each_safe	list.h	554;"	d
hlist_head	list.h	/^struct hlist_head {$/;"	s
hlist_node	list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
htonll	macro.h	41;"	d
initcall_t	macro.h	/^typedef int (*initcall_t)(void);$/;"	t
insert	list.h	/^	struct list_head *pos, *insert = head;$/;"	l
last	list.h	/^	struct list_head *last = list->prev;$/;"	l
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_sort	list.h	/^static inline void list_add_sort(struct list_head *new, struct list_head *head,$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	list.h	261;"	d
list_first_entry	list.h	272;"	d
list_for_each	list.h	/^	list_for_each(pos, head) {$/;"	f
list_for_each	list.h	280;"	d
list_for_each_entry	list.h	322;"	d
list_for_each_entry_continue	list.h	358;"	d
list_for_each_entry_from	list.h	371;"	d
list_for_each_entry_reverse	list.h	333;"	d
list_for_each_entry_safe	list.h	382;"	d
list_for_each_entry_safe_continue	list.h	398;"	d
list_for_each_entry_safe_from	list.h	414;"	d
list_for_each_entry_safe_reverse	list.h	429;"	d
list_for_each_prev	list.h	302;"	d
list_for_each_safe	list.h	312;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_is_last	list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	346;"	d
list_replace	list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
next	list.h	/^	struct hlist_node *next = n->next;$/;"	l
next	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	list.h	/^	struct list_head *next = head->next;$/;"	l
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
ntohll	macro.h	42;"	d
pos	list.h	/^	struct list_head *pos, *insert = head;$/;"	l
pprev	list.h	/^	struct hlist_node **pprev = n->pprev;$/;"	l
pprev	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prefetch	list.h	/^static inline void prefetch(const void *x) {;}$/;"	f
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
pure_initcall	macro.h	36;"	d
